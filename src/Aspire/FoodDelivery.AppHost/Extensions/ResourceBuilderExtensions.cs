using LinqKit;

namespace FoodDelivery.AppHost.Extensions;

public static class ResourceBuilderExtensions
{
    /// <summary>
    /// Enhances the resource builder by assigning user-friendly display names to all HTTP and HTTPS API URLs.
    /// The display name is generated by humanizing the endpoint name and combining it with its scheme.
    /// Only URLs with endpoints named "http" or "https" (case-insensitive) are processed.
    /// </summary>
    /// <param name="builder">The resource builder to enhance.</param>
    /// <returns>The original resource builder instance with updated friendly URL display names.</returns>
    public static IResourceBuilder<ProjectResource> WithFriendlyApiUrls(this IResourceBuilder<ProjectResource> builder)
    {
        ArgumentNullException.ThrowIfNull(builder);

        return builder.WithUrls(context =>
        {
            var endpoints = builder.Resource.GetEndpoints().Select(x => x.EndpointName);

            context
                .Urls.Where(url =>
                    url.Endpoint != null
                    && endpoints.Contains(url.Endpoint.EndpointName, StringComparer.OrdinalIgnoreCase)
                )
                .ForEach(url =>
                {
                    url.DisplayText =
                        $"{builder.Resource.Name} ({url.Endpoint?.Scheme.ToLowerInvariant() ?? "http".ToLowerInvariant()})";
                    url.DisplayLocation = UrlDisplayLocation.SummaryAndDetails;
                });
        });
    }

    public static IResourceBuilder<ProjectResource> WithProjectAsyncAPIUIUrl(
        this IResourceBuilder<ProjectResource> builder
    )
    {
        if (!builder.ApplicationBuilder.ExecutionContext.IsRunMode)
        {
            return builder;
        }

        // string? endpointName = builder.ApplicationBuilder.GetLaunchProfileName();

        foreach (EndpointReference endpointReference in builder.Resource.GetEndpoints())
        {
            builder.WithUrlForEndpoint(
                endpointReference.EndpointName!,
                _ =>
                    new()
                    {
                        Url = "/asyncapi/ui",
                        DisplayText = $"async-api ({endpointReference.EndpointName!.ToLowerInvariant()})",
                        DisplayLocation = UrlDisplayLocation.SummaryAndDetails,
                    }
            );
        }

        return builder;
    }

    public static IResourceBuilder<ProjectResource> WithProjectSwaggerUIUrl(
        this IResourceBuilder<ProjectResource> builder
    )
    {
        if (!builder.ApplicationBuilder.ExecutionContext.IsRunMode)
        {
            return builder;
        }

        // string? endpointName = builder.ApplicationBuilder.GetLaunchProfileName();

        foreach (EndpointReference endpointReference in builder.Resource.GetEndpoints())
        {
            builder.WithUrlForEndpoint(
                endpointReference.EndpointName,
                _ =>
                    new()
                    {
                        Url = "/swagger",
                        DisplayText = $"swagger ({endpointReference.EndpointName.ToLowerInvariant()})",
                        DisplayLocation = UrlDisplayLocation.SummaryAndDetails,
                    }
            );
        }

        return builder;
    }
}
